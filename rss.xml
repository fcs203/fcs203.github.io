<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <atom:link href="https://newzone.top/rss.xml" rel="self" type="application/rss+xml"/>
    <title>LearnData-开源笔记</title>
    <link>https://newzone.top/</link>
    <description>开源工具、效率方法、心理学探索的自我提升笔记，记录并输出一切能让自己提升的知识。</description>
    <language>zh-CN</language>
    <pubDate>Mon, 31 Oct 2022 03:51:04 GMT</pubDate>
    <lastBuildDate>Mon, 31 Oct 2022 03:51:04 GMT</lastBuildDate>
    <generator>vuepress-plugin-feed2</generator>
    <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
    <category>系统</category>
    <category>网络</category>
    <category>自动化</category>
    <category>服务器</category>
    <category>博客</category>
    <category>工具</category>
    <item>
      <title>电脑关机了，第二天一看确又开着的？让系统正常关机！</title>
      <link>https://newzone.top/_posts/2017-09-02-forced_shutdown.html</link>
      <guid>https://newzone.top/_posts/2017-09-02-forced_shutdown.html</guid>
      <source url="https://newzone.top/rss.xml">电脑关机了，第二天一看确又开着的？让系统正常关机！</source>
      <category>系统</category>
      <pubDate>Sat, 02 Sep 2017 00:38:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>电脑晚上明明按下关机键，第二天早上却发现电脑开了一晚上？</p>
<p>这是因为后台应用程序和 GUI 应用程序在阻止或取消关机，系统未能按正常关机。按下列方法授予系统自动关机权限，就能让系统正常关机。</p>
<p><strong>方法如下：</strong></p>
<ol>
<li>
<p>左下角「开始菜单」-「运行」，打开“运行”对话框，输入 <code>Regedit</code>，进入注册表编辑器</p>
</li>
<li>
<p>打开窗口后，在注册表上方菜单中输入 <code>计算机\HKEY_CURRENT_USER\Control Panel\Desktop</code>。</p>
</li>
<li>
<p>在右侧窗格中找到 <code>AutoEndTasks</code> 键值，如果没有，则新建一个名为 <code>AutoEndTasks</code> 的「字符串值」，并将键值的数值设为 <code>1</code>。AutoEndTasks 表示自动结束失去响应的程序任务，0 为 false，是默认值，表示不自动结束失去响应的程序；1 为 true，则表示电脑会自动结束失去响应的程序。</p>
<p><img src="https://pic3.zhimg.com/v2-c643b9737b35f9dd9a8382c5653e3d3e_r.jpg" alt="" loading="lazy"></p>
</li>
<li>
<p>查找或创建字符串值 <code>WaitToKillAppTimeout</code>，将数值设为 <code>2000</code>。2000 是毫秒，就是当有没有响应的程序时，等待 2 秒后会自动结束相应程序。</p>
</li>
</ol>
<p>操作下，让电脑默认强制关机吧！</p>
<p>——————————</p>
<p>网上流行一种修改「gpedit.msc」来达到快速关机的方法，但试验无效，<strong>不能强制关机</strong>。</p>
<ol>
<li>
<p>点击桌面左下角“windows”图标，选择“运行”选项；</p>
</li>
<li>
<p>进入运行窗口，输入“gpedit.msc”命令，按下回车键确定；</p>
</li>
<li>
<p>打开本地组策略编辑器界面，依次展开“计算机配置——管理模板——系统——关机选项”文件夹；鼠标右击右侧“关闭会阻止或取消关机的应用程序的自动终止功能”选项，接着选择“编辑”功能；将弹出窗口选项更改成“已启用”，然后点击“应用——确定”按钮。</p>
<p><img src="https://pic4.zhimg.com/v2-4b736585b25509b036935a2f9c37d843_r.jpg" alt="" loading="lazy"></p>
<p>但开启后，提示程序没有响应，无法关机。</p>
<p><img src="https://pic4.zhimg.com/v2-46fafee0cb6e212e793fc80268ab0917_r.jpg" alt="" loading="lazy"></p>
</li>
</ol>
<p>修改“gpedit.msc”可以关闭程序的关机权限，但没授予关机对程序的关闭权限，<strong>不能使用</strong>！</p>
]]></content:encoded>
      <enclosure url="https://pic3.zhimg.com/v2-c643b9737b35f9dd9a8382c5653e3d3e_r.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>加速 SMB 协议，让 PC 变身小型 NAS</title>
      <link>https://newzone.top/_posts/2017-09-03-smb_lan_sharing.html</link>
      <guid>https://newzone.top/_posts/2017-09-03-smb_lan_sharing.html</guid>
      <source url="https://newzone.top/rss.xml">加速 SMB 协议，让 PC 变身小型 NAS</source>
      <category>系统</category>
      <pubDate>Sun, 03 Sep 2017 20:57:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>Windows 系统开启 SMB 协议：</p>
<ol>
<li>
<p>打开「控制面板」窗口，在「类别」查看方式下单击「程序」。</p>
<p><img src="https://pic1.zhimg.com/v2-af3e5c2a16a1f245ac6584097c53be60_r.jpg" alt="" loading="lazy"></p>
</li>
<li>
<p>打开「程序」窗口，单击「启用或关闭 windows 功能」。</p>
<p><img src="https://pic1.zhimg.com/v2-36207f67a5eb3aeb8ee7c1ae855b13dc_r.jpg" alt="" loading="lazy"></p>
</li>
<li>
<p>打开「windows 功能」窗口，勾选 SMB 直通。</p>
<p><img src="https://pic3.zhimg.com/v2-b1feb5554e6f1da003266be9cb470dfe_r.jpg" alt="" loading="lazy"></p>
</li>
<li>
<p>勾选「远程差分压缩 API 支持」。</p>
<p><img src="https://pic4.zhimg.com/v2-c5fc3e3d771b6e4bd2516372c69b340b_r.jpg" alt="" loading="lazy"></p>
</li>
</ol>
<p>网上很多教程都要求关闭“远程差分压缩”复选框，这是对“远程差分压缩”的误解。</p>
<p>官方解释：远程差分压缩 (RDC) 功能是一组应用程序编程接口 (API)，这些应用程序可用于确定某个文件集是否发生了变化，如果是，就检测哪部分文件进行了更改。RDC 检测文件中数据的插入、删除和重新排列，使应用程序能够仅复制文件的已更改部分。这对于在有限带宽网络（如广域网 (WAN) 连接）上复制文件非常有用。</p>
]]></content:encoded>
      <enclosure url="https://pic1.zhimg.com/v2-af3e5c2a16a1f245ac6584097c53be60_r.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>光猫改造 篇一：超级管理员密码破解（E8-C-EPON RG201O-CA_V1A2)</title>
      <link>https://newzone.top/_posts/2017-10-18-light_cat_e8-c-epon_admin.html</link>
      <guid>https://newzone.top/_posts/2017-10-18-light_cat_e8-c-epon_admin.html</guid>
      <source url="https://newzone.top/rss.xml">光猫改造 篇一：超级管理员密码破解（E8-C-EPON RG201O-CA_V1A2)</source>
      <category>网络</category>
      <pubDate>Wed, 18 Oct 2017 18:28:00 GMT</pubDate>
      <content:encoded><![CDATA[<h2 id="为什么要获得光猫超级密码" tabindex="-1"> 为什么要获得光猫超级密码？</h2>
<p>*端口映射 (eMule high ID)、桥接模式（路由器掌控拨号，不能兼容固定电话）。*网上关于光猫超级密码的获取攻略都在 2012-14 年，已经无法使用了。</p>
<h3 id="测试环境" tabindex="-1"> 测试环境</h3>
<p>运营商：上海电信
设备：贝尔 E8-C-EPON
硬件版本：RG201O-CA_V1A2
软件版本：E201OCAA2V11S</p>
<h2 id="光猫超级密码破解步骤" tabindex="-1"> 光猫超级密码破解步骤</h2>
<ol>
<li>
<p>地址栏输入 <code>192.168.1.1</code>，用户名：光猫背面，密码：光猫背面，登陆管理界面。</p>
<p><img src="https://pic1.zhimg.com/v2-9e43bc86b9095f3f6c2cfa4bd58dcd68_r.jpg" alt="" loading="lazy"></p>
</li>
<li>
<p>浏览器地址栏输入 <code>192.168.1.1/backupsettings.txt</code>，将 <code>backupsettings.txt</code> 文件导出并备份在电脑上。
如果打不开上面的地址，改为输入 <code>192.168.1.1/backupsettings.conf</code>，并做好备份。</p>
</li>
<li>
<p>打开下载好的文档 <code>backupsettings.txt</code> 或 <code>backupsettings.conf</code>，搜索 <code>TeleComAccount</code>，两个 password 间就是超级密码。超级账号是 telecomadmin。</p>
<p><img src="https://pic3.zhimg.com/v2-ee441dd18cc8e5f6303fdaef82b6d476_r.jpg" alt="" loading="lazy"></p>
</li>
<li>
<p>地址栏输入 <code>192.168.1.1</code>，用刚获取的超级密码登陆，然后开始端口映射和设备桥接了。</p>
<p><img src="https://pic1.zhimg.com/v2-31d6bb6b90be541c186a360fe2dd323c_r.jpg" alt="" loading="lazy"></p>
</li>
</ol>
<p>新装光猫无法获取超级密码的话，可直接使用运营商 app 进行映射。</p>
]]></content:encoded>
      <enclosure url="https://pic1.zhimg.com/v2-9e43bc86b9095f3f6c2cfa4bd58dcd68_r.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>光猫改造 篇二：光猫 + 路由器，实现端口映射</title>
      <link>https://newzone.top/_posts/2017-10-18-light_cat_port_forwarding.html</link>
      <guid>https://newzone.top/_posts/2017-10-18-light_cat_port_forwarding.html</guid>
      <source url="https://newzone.top/rss.xml">光猫改造 篇二：光猫 + 路由器，实现端口映射</source>
      <category>网络</category>
      <pubDate>Wed, 18 Oct 2017 22:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>光猫默认没有管理权限，需要先获得光猫的超管密码，参考 <a href="https://newzone.top/_posts/2017-10-18-Light_cat_E8-C-EPON_admin.html" target="_blank" rel="noopener noreferrer">光猫改造 篇一：超级管理员密码破解（E8-C-EPON RG201O-CA_V1A2）</a>。</p>
<p><strong>光猫端口映射步骤：</strong></p>
<ol>
<li>
<p>登陆光猫管理地址 192.168.1.1，应用 → 高级 NAT 设置 →DMZ 设置，启用 DMZ 主机绑定路由器地址（路由器 WAN 口 IP 地址-192.168.1.X)</p>
<p><img src="https://pic2.zhimg.com/v2-658d5433201b79da169a520f4b19d495_r.jpg" alt="" loading="lazy"></p>
</li>
<li>
<p>登陆路由器管理地址 192.168.X.X。这里已梅林 AC5300 为图例。</p>
<p><img src="https://pic4.zhimg.com/v2-32825a6d3d75f4bfe5668f1b0d6c6683_r.jpg" alt="" loading="lazy"></p>
</li>
<li>
<p>在路由器设置选项中找到“端口转发”，按要求设置端口。我这是 eMule TCP 和 UDP 转发，设置完成后，变成 High ID。</p>
<p><img src="https://pic2.zhimg.com/v2-8f3eb2c42fd5d1a98f1345c6a5855e99_r.jpg" alt="" loading="lazy"></p>
<p><img src="https://pic2.zhimg.com/v2-b4f5179278da52409f4a04ce7d139f99_r.jpg" alt="" loading="lazy"></p>
</li>
</ol>
]]></content:encoded>
      <enclosure url="https://pic2.zhimg.com/v2-658d5433201b79da169a520f4b19d495_r.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>雇个机器人帮你干活</title>
      <link>https://newzone.top/_posts/2018-01-31-hire_a_robot.html</link>
      <guid>https://newzone.top/_posts/2018-01-31-hire_a_robot.html</guid>
      <source url="https://newzone.top/rss.xml">雇个机器人帮你干活</source>
      <category>自动化</category>
      <pubDate>Wed, 31 Jan 2018 22:51:00 GMT</pubDate>
      <content:encoded><![CDATA[<blockquote>
<p>机器人会取代你工作！
计算云会取代你工作！
AI 会取代你的工作！</p>
</blockquote>
<p>我相信科技终究有一天会消灭所有工作，但我们这代人的无奈就是很难等到这一天。</p>
<p>作为懒人、宅男，等不及了怎么办？</p>
<p>既然还没被取代，那就<strong>雇个机器人帮你干活</strong>！</p>
<p>我每天第一件事是去各个网站看热门新闻、行业资料。以前是用 RSS，但 RSS 被视为落后，越来越多的网站不再提供 RSS 源。离开 RSS，我就一直没找到更合适的方法去将内容聚合起来，不得不在一个个网站间疲于奔命，逐渐不再看内容。</p>
<blockquote>
<p>RSS(Really Simple Syndication) 是一种描述和同步网站内容的格式，是使用最广泛的 XML 应用。简易信息聚合（也叫聚合内容）是一种 RSS 基于 XML 标准，在互联网上被广泛采用的内容包装和投递协议。</p>
</blockquote>
<ul>
<li><input type="checkbox" id="task-item-0" disabled="disabled"><label for="task-item-0"> 增加 <code>Alfred</code> 搜索</label></li>
</ul>
<p><strong>直到遇到了我的第一个机器人雇员 <a href="https://github.com/huginn/huginn" target="_blank" rel="noopener noreferrer">Huginn</a></strong></p>
<blockquote>
<p>Huginn 是一个可以创建为你在线执行自动化任务的系统。Huginn 可以读取网页，监测事件并且执行符合你需求的动作。Huginn 通过 agents 创建并执行任务（事件流）。你可以将它看作是一个运行在你自己服务器上的 IFTTT 或 Zapier。</p>
</blockquote>
<p>Huginn 帮我将所有信息聚合成 RSS，24 小时帮我获取我要的内容。</p>
<ul>
<li><a href="http://news.163.com/rank" target="_blank" rel="noopener noreferrer">网易热门新闻</a>：抓取网易顶贴最多的 100 条新闻</li>
<li><a href="http://top.baidu.com/buzz?b=1" target="_blank" rel="noopener noreferrer">百度实时热点</a>：实时更新每天的百度热点</li>
<li><a href="https://www.guokr.com/" target="_blank" rel="noopener noreferrer">果壳网</a>：果壳首页推荐，官方更新速度较慢，刚好可以了解些奇思妙想</li>
<li>工作类：梅花、SocialBeta、数英网、艾瑞网</li>
</ul>
]]></content:encoded>
    </item>
    <item>
      <title>新手建站神器 - 宝塔面板</title>
      <link>https://newzone.top/_posts/2018-04-30-baota_deploy_vps.html</link>
      <guid>https://newzone.top/_posts/2018-04-30-baota_deploy_vps.html</guid>
      <source url="https://newzone.top/rss.xml">新手建站神器 - 宝塔面板</source>
      <category>服务器</category>
      <pubDate>Mon, 30 Apr 2018 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>新手建站最大的痛苦就是代码太多，无法轻松管理。</p>
<p>国产的宝塔面板完美解决新手建站难题，在可视化界面中为服务器安装应用、同步文件、定期执行代码、管理服务。</p>
<blockquote>
<p>一键创建网站、FTP、数据库、SSL；安全管理，计划任务，文件管理，PHP 多版本共存及切换；自带 LNMP 与 LAMP</p>
</blockquote>
<p><img src="http://tc.seoipo.com/18-4-30/97791164.jpg" alt="宝塔面板界面图" loading="lazy"></p>
<p>宝塔安装说明：<a href="https://www.bt.cn/bbs/thread-1186-1-1.html" target="_blank" rel="noopener noreferrer">https://www.bt.cn/bbs/thread-1186-1-1.html</a></p>
<h2 id="宝塔安装-lnmp-或-lamp-环境" tabindex="-1"> 宝塔安装 LNMP 或 LAMP 环境</h2>
<p><strong>LNMP</strong> 和 <strong>LAMP</strong> 都是成熟的建站环境，根据自己的需求二选一即可。
如果有定制需求，可以在左侧「软件管理」中选定要安装的环境
<img src="http://tc.seoipo.com/18-4-30/21951434.jpg" alt="软件安装界面" loading="lazy"></p>
]]></content:encoded>
      <enclosure url="http://tc.seoipo.com/18-4-30/97791164.jpg" type="image/jpeg"/>
    </item>
    <item>
      <title>Jekyll 篇一：3 分钟搭建 Github Pages 博客</title>
      <link>https://newzone.top/_posts/2018-05-01-jekyll_blog_on_github_pages.html</link>
      <guid>https://newzone.top/_posts/2018-05-01-jekyll_blog_on_github_pages.html</guid>
      <source url="https://newzone.top/rss.xml">Jekyll 篇一：3 分钟搭建 Github Pages 博客</source>
      <category>博客</category>
      <pubDate>Tue, 01 May 2018 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>一直都想建立自己的个人博客，重装过 N 次 WordPress，又因为种种原因而放弃。</p>
<p>偶然看到了 Hux 的 Jekyll 模板，被漂亮的设计给迷住了。Github Pages 默认支持 Jekyll 环境，并提供了免费空间和流量，因此开始了 Github Pages + Jekyll 之路。</p>
<h3 id="搭建流程" tabindex="-1"> 搭建流程</h3>
<ol>
<li>
<p>注册并登录 <a href="https://github.com/" target="_blank" rel="noopener noreferrer">Github</a>。</p>
</li>
<li>
<p>选择一个喜欢的 <a href="http://jekyllthemes.org/" target="_blank" rel="noopener noreferrer">Jekyll 模板</a>, 进入对应的 Github 主页。我选了黄玄的 <a href="https://github.com/Huxpro/huxpro.github.io" target="_blank" rel="noopener noreferrer">Hux Blog</a>。</p>
</li>
<li>
<p>点击 <code>Fork</code>, 将喜欢的模板复制到自己的 Github 仓库中。</p>
<p><img src="http://tc.seoipo.com/20180505201522.png" alt="" loading="lazy"></p>
</li>
<li>
<p>点击 <code>Setting</code>, 修改 <code>Repository name</code> 为 <code>xxx.github.io</code>, <code>xxx</code> 是你的 Github 用户名。</p>
<p><img src="http://tc.seoipo.com/20180505202201.png" alt="" loading="lazy"></p>
</li>
<li>
<p>同一页面选择「Code and automation - Pages - Build and deployment - Branch」, 将 master branch 设为 Github Pages 来源，网站运行目录默认为 <code>/(root)</code>。设置好后，点击「Save」。</p>
<p><img src="http://tc.seoipo.com/2022-08-08-11-42-16.png" alt="" loading="lazy"></p>
</li>
<li>
<p>最后，按页面提示访问链接 <code>https://xxx.github.io/</code>，新博客搭建完毕。</p>
<p><img src="http://tc.seoipo.com/20180505202859.png" alt="" loading="lazy"></p>
</li>
</ol>
]]></content:encoded>
      <enclosure url="http://tc.seoipo.com/20180505201522.png" type="image/png"/>
    </item>
    <item>
      <title>Jekyll 扩展篇：服务器搭建 Jekyll 博客</title>
      <link>https://newzone.top/_posts/2018-05-02-jekyll_blog_on_vps.html</link>
      <guid>https://newzone.top/_posts/2018-05-02-jekyll_blog_on_vps.html</guid>
      <source url="https://newzone.top/rss.xml">Jekyll 扩展篇：服务器搭建 Jekyll 博客</source>
      <category>博客</category>
      <pubDate>Wed, 02 May 2018 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>Github 墙得太厉害，就想在服务器上自建 Jekyll 环境，用上 Travis CI 和 Docker 后才发现完全没必要。。</p>
<p>Jekyll 环境官方 <a href="https://www.jekyll.com.cn/docs/quickstart/" target="_blank" rel="noopener noreferrer">安装指南</a>：</p>
<ol>
<li>
<p>使用 RVM 安装 Ruby (rvm -&gt; ruby -&gt; gem 网上大量教程就不赘述了)</p>
</li>
<li>
<p>安装 jekyll：<code>gem install jekyll</code>。</p>
</li>
<li>
<p>进入 jekyll 网站，执行命令行 <code>jekyll build</code>，生成 Jekyll 静态网页。</p>
</li>
<li>
<p>网站的执行目录需要指定在 <code>_site</code>，这是 Jekyll 生成的静态页面目录。之后每次更新博客，都需要进入服务器执行一次 <code>jekyll build</code>，重新生成静态页面。</p>
</li>
</ol>
<p>愿意折腾的话，可以使用 Travis CI 和 Docker 完成全自动化更新。</p>
]]></content:encoded>
    </item>
    <item>
      <title>Jekyll 篇二：自动部署服务器博客</title>
      <link>https://newzone.top/_posts/2018-05-03-jekyll_blog_autodeploy.html</link>
      <guid>https://newzone.top/_posts/2018-05-03-jekyll_blog_autodeploy.html</guid>
      <source url="https://newzone.top/rss.xml">Jekyll 篇二：自动部署服务器博客</source>
      <category>博客</category>
      <pubDate>Thu, 03 May 2018 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>Github 上搭建 Jekyll 是最方便的，空间免费、流量免费、部署简单。但 Github 属于被墙状态，将博客部署在那，速度实在太慢。在玩了几天后，我开始在服务器上直接搭建 Jekyll 博客。</p>
<p>服务器搭建需要人工执行 <code>jekyll build</code>, 完全背离了最开始搭建博客的初衷-<strong>方便</strong>。之后结合了网络上多个自动化方案，选定入门成本最低的 <code>Github</code> -&gt; <code>Travis CI</code> -&gt; <code>Docker</code>-&gt; <code>VPS</code>。</p>
<h2 id="搭建思路" tabindex="-1"> 搭建思路</h2>
<ul>
<li>本地提交博客 Markdown 文件 到 Github 源文件 repository</li>
<li>Github 触发 Travis CI 执行自动编译</li>
<li>Travis CI 编译后 push 静态文件到 Github 静态文件 repository</li>
<li>Travis CI 通知 Docker 重建镜像（预计 5 分钟）</li>
<li>服务器休眠 5 分钟后，Travis CI 通知服务器</li>
<li>服务器拉取最新镜像，然后停止并删除原容器，用最新镜像重建容器</li>
</ul>
<h2 id="travis-ci-基本配置" tabindex="-1"> Travis CI 基本配置</h2>
<p>Travis CI 对于开源项目完全免费，并且能自动感知到 Github 的 commit，帮我们解决了静态文件生成问题。</p>
<p>先用 Github 登录 Travis CI，然后点击最右侧的头像，开启想要使用 Travis CI 的项目</p>
<p><img src="http://tc.seoipo.com/20180504135244.png" alt="" loading="lazy"></p>
<p>点击设置按钮，进入项目设置</p>
<p><img src="http://tc.seoipo.com/20180504135541.png" alt="" loading="lazy"></p>
<h2 id="静态文件更新" tabindex="-1"> 静态文件更新</h2>
<p>Travis CI push 静态文件到 Github 通过 Github 的 token 实现授权，push 代码如下</p>
<div data-ext="sh"><pre><code>after_success:
  - <span>git</span> clone https://github.com/rockbenben/rockbenben.github.io.git
  - <span>cd</span> rockbenben.github.io <span>&amp;&amp;</span> <span>rm</span> <span>-rf</span> * <span>&amp;&amp;</span> <span>cp</span> <span>-r</span> <span>..</span>/_site/* <span>.</span>
  - <span>git</span> config user.name <span>"rockbenben"</span>
  - <span>git</span> config user.email <span>"qingwhat@gmail.com"</span>
  - <span>git</span> <span>add</span> <span>--all</span> <span>.</span>
  - <span>git</span> commit <span>-m</span> <span>"Travis CI Auto Builder"</span>
  - <span>git</span> push <span>--force</span> https://<span>$DEPLOY_TOKEN</span>@github.com/rockbenben/blog.git master
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p><code>$DEPLOY_TOKEN</code> 是从 Github 授权得到的，<code>setting - Developer settings - Personal access tokens - Generate new token</code>, 然后给于相应权限即可，<code>admin:public_key, admin:repo_hook, repo</code>。</p>
<p><img src="http://tc.seoipo.com/20180504153729.png" alt="" loading="lazy"></p>
<p>进入 Travis 的 repo 项目，<code>More options - Settings - Environment Variables</code>, 新建一个变量<code>DEPLOY_TOKEN</code>，把 Github 的授权 token 保存在里面。</p>
<p><img src="http://tc.seoipo.com/20180504154229.png" alt="" loading="lazy"></p>
<p>Travis CI 提供了存放加密文件的方式，参考 <a href="https://docs.travis-ci.com/user/encrypting-files/" target="_blank" rel="noopener noreferrer">官方文档</a>。</p>
<h2 id="dockerfiles-设置" tabindex="-1"> Dockerfiles 设置</h2>
<p>在 Github 中新建一个 repository，可以命名为 <code>dockerfiles</code>, 专门用来存储 Docker 镜像的设置文件。在 <code>dockerfiles</code> 新建文件夹 <code>jekyll</code> ，并在 <code>jekyll</code> 中新建文件 <code>Dockerfile</code>, 放入以下代码：</p>
<div data-ext="sh"><pre><code>FROM nginx:1.13.9-alpine

LABEL <span>maintainer</span><span>=</span><span>"Benson &lt;qingwhat@gmail.com>"</span>

ARG <span>TZ</span><span>=</span><span>'Asia/Shanghai'</span>

ENV TZ <span>${TZ}</span>

RUN apk upgrade <span>--update</span> <span>\</span>
    <span>&amp;&amp;</span> apk <span>add</span> <span>bash</span> <span>git</span> <span>\</span>
    <span>&amp;&amp;</span> <span>rm</span> <span>-rf</span> /usr/share/nginx/html <span>\</span>
    <span>&amp;&amp;</span> <span>git</span> clone https://github.com/rockbenben/blog.git /usr/share/nginx/html <span>\</span>
    <span>&amp;&amp;</span> <span>ln</span> <span>-sf</span> /usr/share/zoneinfo/<span>${TZ}</span> /etc/localtime <span>\</span>
    <span>&amp;&amp;</span> <span>echo</span> <span>${TZ}</span> <span>></span> /etc/timezone <span>\</span>
    <span>&amp;&amp;</span> <span>rm</span> <span>-rf</span> /var/cache/apk/*

<span># ADD entrypoint.sh /entrypoint.sh #容易报错</span>
<span># ADD flush /usr/local/bin/flush #容易报错</span>

WORKDIR /usr/share/nginx/html

<span># CMD ["/entrypoint.sh"] #容易报错</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>将 Travis CI 生成的静态文件推送到 Github，博客的 docker 化部署，采用 nginx + 静态文件 方式</p>
<p>样例 Dockerfile: <a href="https://github.com/mritd/dockerfile/tree/master/mritd" target="_blank" rel="noopener noreferrer">https://github.com/mritd/dockerfile/tree/master/mritd</a></p>
<h2 id="docker-镜像设置" tabindex="-1"> Docker 镜像设置</h2>
<p>注册并登录 <a href="https://hub.docker.com" target="_blank" rel="noopener noreferrer">Docker Hub</a>，点击 <code>Create - Create Automated Build - Create Auto-build Github</code>, 选择之前新建的 <code>dockerfiles</code> repository。</p>
<p>建立 Automated Build 镜像后，进入 <code>Build Seeting</code>, 点击 Trigger，建立第一个 Docker 镜像。</p>
<p><img src="http://tc.seoipo.com/20180504161016.png" alt="" loading="lazy"></p>
<p>然后在 <code>Building Settings - Build Triggers - Activate Triggers</code> ，复制 Trigger URL。</p>
<p><img src="http://tc.seoipo.com/20180504161245.png" alt="" loading="lazy"></p>
<p>然后在服务器上执行下列代码，拉取并<strong>启动 Docker 镜像</strong>。</p>
<div data-ext="sh"><pre><code><span>docker</span> pull rockben/jekyll
<span>docker</span> stop jekyll_blog
<span>docker</span> <span>rm</span> jekyll_blog
<span>docker</span> run <span>--name</span><span>=</span>jekyll_blog <span>-d</span> <span>-p</span> <span>39100</span>:80 <span>--privileged</span><span>=</span>true rockben/jekyll:latest
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div></div></div><p>--name=jekyll_blog 中的 <code>jekyll_blog</code> 是对容器的命名，方便后续操作。</p>
<p>-d 让容器在后台运行。</p>
<p>-p 映射端口：80 是容器内对应的端口，39100 是主机端口，也就是最终用户访问的端口，本端口可以自由选择。</p>
<p>--privileged=true 关闭安全权限，否则你容器操作文件夹没有权限。</p>
<p>--<code>rockben/jekyll:latest</code> 是容器名称，可省略 <code>:latest</code>。</p>
<p>运行容器后，访问 <code>seoipo.com:39100</code> 就可以看到镜像网页。如果每次用端口访问，可以在域名 DNS 中设置显性 URL，将二级域名 <code>blog.seoipo.com</code> 指向 <code>seoipo.com:39100</code></p>
<h3 id="docker-扩展阅读" tabindex="-1"> Docker 扩展阅读</h3>
<p><strong>Docker 命令符</strong>：</p>
<div data-ext="sh"><pre><code><span>docker</span> <span>ps</span> // 查看所有正在运行容器
<span>docker</span> stop containerId // containerId 是容器的 ID

<span>docker</span> <span>ps</span> <span>-a</span> // 查看所有容器
<span>docker</span> <span>ps</span> <span>-a</span> <span>-q</span> // 查看所有容器 ID

<span>docker</span> stop <span><span>$(</span><span>docker</span> <span>ps</span> <span>-a</span> <span>-q</span><span>)</span></span> //  stop 停止所有容器
<span>docker</span> <span>rm</span> <span><span>$(</span><span>docker</span> <span>ps</span> <span>-a</span> <span>-q</span><span>)</span></span> //   remove 删除所有容器
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p><strong><code>docker run</code> 进阶设置</strong></p>
<div data-ext="sh"><pre><code><span>docker</span> run <span>--name</span><span>=</span>jekyll_blog <span>-d</span> <span>-p</span> <span>39100</span>:80 <span>-v</span> /www/wwwroot/jekyll:/jekyll <span>--privileged</span><span>=</span>true rockben/jekyll:latest /bin/bash
</code></pre><div aria-hidden="true"><div></div></div></div><p>-v 挂载目录/root/software 本地目录 /software 容器目录，在创建前容器是没有 software 目录的，docker 容器会自己创建
--<code>/bin/bash</code> 这是 CMD 命令行，可不填</p>
<h2 id="ssh-免密码登录" tabindex="-1"> SSH 免密码登录</h2>
<p>Travis 不能利用用户名和密码登陆，我们只有利用<strong>SSH 免密登陆</strong>服务器，更新并重启 Docker 容器。</p>
<p><strong>1、生成公钥/私钥对</strong></p>
<div data-ext="sh"><pre><code><span>cd</span> ~/.ssh  <span># 切换 .ssh 目录，目录的第一个字符如果是 `.` 表示改文件夹是隐藏文件夹</span>
<span>mkdir</span> ~/.ssh  <span>#如果 .ssh 文件夹不存在，可以执行指令自行创建。如果 .ssh 文件已经存在，该命令会指出 .ssh 目录：/root/.ssh</span>
ssh-keygen <span>-t</span> rsa     <span># 生成 RSA 密钥对，后面所有的直接以默认就行，passphase 一定要为空</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div></div></div><p><strong>2、将生成的公钥添加为受信列表</strong></p>
<div data-ext="sh"><pre><code><span>cd</span> ~/.ssh  <span># 切换.ssh 目录</span>
<span>cat</span> id_rsa.pub <span>>></span> authorized_keys <span>#将公钥内容输出到 authorized_keys 中</span>
</code></pre><div aria-hidden="true"><div></div><div></div></div></div><p><strong>3、在.ssh 目录下新增配置文件 config</strong></p>
<div data-ext="sh"><pre><code><span>cd</span> ~/.ssh  <span># 切换 .ssh 目录</span>
<span>vim</span> config  <span>#新建并打开目录</span>
</code></pre><div aria-hidden="true"><div></div><div></div></div></div><p>点击 <code>i</code> 进入编辑状态，输入下列代码。完毕后，点击 <code>Esc</code> 退出编辑状况，然后输入 <code>:wq!</code> 强制保存后离开文件</p>
<div data-ext="sh"><pre><code>Host <span>test</span>
HostName <span>99.99</span>.99.99<span>(</span>你的服务器 <span>ip</span><span>)</span>
<span>#登陆的用户名</span>
User travis
IdentitiesOnly <span>yes</span>
<span>#登陆使用的密钥</span>
IdentityFile ~/.ssh/id_rsa
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p><strong>4、在 Linux 服务器安装 Travis 客户端</strong>（rvm -&gt; ruby -&gt; gem -&gt;Travis）</p>
<p><code>gem install travis</code></p>
<p><strong>5、服务器创建空白<code>.travis.yml</code>文件</strong></p>
<div data-ext="sh"><pre><code><span>mkdir</span> /home/travis <span>#新建 travis 文件夹</span>
<span>touch</span> /home/travis/.travis.yml <span>#在 travis 文件夹里创建空白 .travis.yml 文件</span>
</code></pre><div aria-hidden="true"><div></div><div></div></div></div><p><strong>6、服务器登录 Travis，添加加密的私钥至代码仓库</strong></p>
<div data-ext="sh"><pre><code><span>cd</span> /home/travis  <span>#进入 .travis.yml 所在文件夹</span>
travis login     <span>#用 GitHub 账户登陆 travis</span>

<span>#登陆成功后解密私钥，--add 参数会把加密的私钥解密命令插入到.travis.yml，Travis 解密时要用到的</span>
<span>#-r 之后是 Github 源文件目录</span>
travis encrypt-file ~/.ssh/id_rsa <span>--add</span> <span>-r</span> rockbenben/rockbenben.github.io

<span>#保存加密后的私钥 id_rsa.enc，上传到 Github 源文件 repository 中</span>

<span>#.travis.yml 中也自动添加了解密命令</span>
<span>cat</span> /home/travis/.travis.yml  <span>#打开服务器的 .travis.yml 文件并保存</span>
before_install:
- openssl aes-256-cbc <span>-K</span> <span>$encrypted_</span>****_key <span>-iv</span> <span>$encrypted_</span>****_iv
  <span>-in</span> id_rsa.enc <span>-out</span> ~/.ssh/id_rsa <span>-d</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p><strong>成功加密后，会提示</strong></p>
<div data-ext="sh"><pre><code>Make sure to <span>add</span> id_rsa.enc to the <span>git</span> repository.
Make sure not to <span>add</span> ~/.ssh/id_rsa to the <span>git</span> repository.
Commit all changes to your .travis.yml.
</code></pre><div aria-hidden="true"><div></div><div></div><div></div></div></div><ul>
<li>
<p><strong>将新生成的 <code>id_rsa.enc</code> 文件上传到 Github 源文件 repository 中</strong></p>
</li>
<li>
<p>将 <code>.travis.yml</code> 中的 <code>openssl aes-256-cbc -K $encrypted_5c280379e96c_key -iv $encrypted_5c280379e96c_iv -in id_rsa.enc -out ~/.ssh/id_rsa -d</code> 放入最终的 <code>.travis.yml</code> 文件中。</p>
<p><img src="http://tc.seoipo.com/20180504184508.png" alt="" loading="lazy"></p>
</li>
</ul>
<h2 id="travis-yml-配置" tabindex="-1"> travis.yml 配置</h2>
<p>当项目内存在 <code>.travis.yml</code> 文件时，Travis CI 会按照其定义完成自动 build 过程，所以开启了上述配置以后还要在 Github 的 Jekyll 源文件项目下创建 <code>.travis.yml</code> 配置文件。</p>
<p><img src="http://tc.seoipo.com/20180504141827.png" alt="" loading="lazy"></p>
<p><code>.travis.yml</code> 配置文件内容样例如下：</p>
<div data-ext="sh"><pre><code>language: ruby
rvm:
- <span>2.3</span>.3

before_script:
- openssl aes-256-cbc <span>-K</span> <span>$encrypted_5c280379e96c_key</span> <span>-iv</span> <span>$encrypted_5c280379e96c_iv</span>
  <span>-in</span> id_rsa.enc <span>-out</span> ~/.ssh/id_rsa <span>-d</span>      <span>#本句是服务器上的 Travis 自动生成的，但默认生成的命令可能会在/前面带转义符\，我们不需要这些转义符，手动删掉所有的转义符，否则可能在后面引发莫名的错误。</span>
- <span>chmod</span> <span>600</span> ~/.ssh/id_rsa
- <span>echo</span> <span>-e</span> <span>"Host 106.15.190.249<span title="\n">\n</span><span title="\t">\t</span>StrictHostKeyChecking no<span title="\n">\n</span>"</span> <span>>></span> ~/.ssh/config <span>#106.15.190.249 是服务器 IP，修改成你自己的就行</span>

<span># Assume bundler is being used, therefore</span>
<span># the `install` step will run `bundle install` by default.</span>
install:
- gem <span>install</span> jekyll
- gem <span>install</span> jekyll-paginate

script: jekyll build <span>#&amp;&amp; htmlproofer ./_site #指定目录容易报错</span>

after_success:
  - <span>git</span> clone https://github.com/rockbenben/rockbenben.github.io.git
  - <span>cd</span> rockbenben.github.io <span>&amp;&amp;</span> <span>rm</span> <span>-rf</span> * <span>&amp;&amp;</span> <span>cp</span> <span>-r</span> <span>..</span>/_site/* <span>.</span>
  - <span>git</span> config user.name <span>"rockbenben"</span>
  - <span>git</span> config user.email <span>"qingwhat@gmail.com"</span>
  - <span>git</span> <span>add</span> <span>--all</span> <span>.</span>
  - <span>git</span> commit <span>-m</span> <span>"Travis CI Auto Builder"</span>
  - <span>git</span> push <span>--force</span> https://<span>$DEPLOY_TOKEN</span>@github.com/rockbenben/blog.git master
  <span># Trigger all tags/branchs for this automated build.</span>
  - <span>curl</span> <span>-X</span> POST https://registry.hub.docker.com/u/rockben/jekyll/trigger/9b1e9527-0cf1-4756-8332-50f8dff37747/ <span>#本句的链接是 hub.docker.com 自动生成，进入 docker 项目后，Building Settings - Build Triggers - Activate Triggers ，复制 Trigger URL</span>
  - <span>sleep</span> 5m <span>#超过 10 分钟，tavis 将失去响应。此处是在等待 docker 镜像更新</span>
  - <span>ssh</span> root@106.15.190.249 <span>-p</span> <span>27378</span> <span>-o</span> <span>StrictHostKeyChecking</span><span>=</span>no <span>"docker pull rockben/jekyll &amp;&amp; docker stop jekyll_blog &amp;&amp; docker rm jekyll_blog &amp;&amp; docker run --name=jekyll_blog -d -p 39100:80 --privileged=true rockben/jekyll:latest"</span>  <span>#ssh 连接后，重启 docker 容器，jekyll_blog 为之前设定的容器名。</span>
  <span># -p 27378 是我自设的服务器端口，默认是 22</span>
  <span># - ssh root@106.15.190.249 -p 27378 -o StrictHostKeyChecking=no "/www/wwwroot/jekyll_build.sh" #执行 jekyll 重建脚本</span>
  <span>#- ssh root@106.15.190.249 -o StrictHostKeyChecking=no 'cd ~/blog-front &amp;&amp; git pull &amp;&amp; npm install &amp;&amp; npm run build'   #使用 ssh 连接服务器，git pull?</span>

<span># branch whitelist, only for Github Pages</span>
branchs:
  only:
  - master  <span>#指定只有检测到 master 分支有变动时才执行任务</span>

env:
  global:
  - <span>NOKOGIRI_USE_SYSTEM_LIBRARIES</span><span>=</span>true <span># speeds up installation of html-proofer</span>

addons:
  ssh_known_hosts:
  - <span>106.15</span>.190.249 <span>#受信主机，你的 Linux 服务器 ip</span>

sudo: <span>false</span> <span># route your build to the container-based infrastructure for a faster build</span>
</code></pre><div aria-hidden="true"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></div><p>具体 .travis.yml 配置，请参考 <a href="https://docs.travis-ci.com/" target="_blank" rel="noopener noreferrer">官方文档</a>。</p>
<p>参考资料&amp;引用：</p>
<ul>
<li>
<p><a href="https://github.com/Huxpro/huxpro.github.io" target="_blank" rel="noopener noreferrer">Jekyll 模板 hux blog</a></p>
</li>
<li>
<p><a href="https://zhuanlan.zhihu.com/p/25066056" target="_blank" rel="noopener noreferrer">一点都不高大上，手把手教你使用 Travis CI 实现持续部署</a></p>
</li>
<li>
<p><a href="https://mritd.me/2017/02/25/jekyll-blog-+-travis-ci-auto-deploy/" target="_blank" rel="noopener noreferrer">Jekyll + Travis CI 自动化部署博客</a></p>
</li>
<li>
<p><a href="https://juejin.im/post/5a9e1a5751882555712bd8e1" target="_blank" rel="noopener noreferrer">Travis-CI 自动化测试并部署至自己的 CentOS 服务器</a></p>
</li>
<li>
<p><a href="https://segmentfault.com/a/1190000011218410" target="_blank" rel="noopener noreferrer">Travis CI 系列：自动化部署博客</a></p>
</li>
<li>
<p><a href="https://juejin.im/post/5a2941ad6fb9a045030ffc95" target="_blank" rel="noopener noreferrer">SSH 免密登录远程服务器</a></p>
</li>
<li>
<p><a href="http://www.cnblogs.com/scofi/p/6617394.html" target="_blank" rel="noopener noreferrer">SSH 公钥登录原理</a></p>
</li>
<li>
<p><a href="https://blog.csdn.net/yinweitao12/article/details/73165914" target="_blank" rel="noopener noreferrer">如何将 dockerhub 与 github 关联</a></p>
</li>
<li>
<p><a href="http://www.cnblogs.com/YasinXiao/p/7736075.html" target="_blank" rel="noopener noreferrer">docker 启动，端口映射，挂载本地目录</a></p>
</li>
<li>
<p><a href="https://yeasy.gitbooks.io/docker_practice/" target="_blank" rel="noopener noreferrer">Docker — 从入门到实践</a></p>
</li>
</ul>
]]></content:encoded>
      <enclosure url="http://tc.seoipo.com/20180504135244.png" type="image/png"/>
    </item>
    <item>
      <title>怎么用 Adobe Audition 快速剪切音频？</title>
      <link>https://newzone.top/_posts/2018-05-04-audition_cut_mp3.html</link>
      <guid>https://newzone.top/_posts/2018-05-04-audition_cut_mp3.html</guid>
      <source url="https://newzone.top/rss.xml">怎么用 Adobe Audition 快速剪切音频？</source>
      <category>工具</category>
      <pubDate>Fri, 04 May 2018 00:00:00 GMT</pubDate>
      <content:encoded><![CDATA[<p>很久没剪音频了，突然被朋友拜托，才发现 Audition 剪切音频有多非人性，操作跟 10 年前的软件相比，没任何进步。</p>
<h2 id="简易剪切流程" tabindex="-1"> 简易剪切流程</h2>
<ol>
<li>
<p>在 Audition 中打开音频文件。</p>
<p><img src="http://tc.seoipo.com/20180504152233.png" alt="" loading="lazy"></p>
</li>
<li>
<p>选定要删除的音频部分：左键按住在<strong>删除音频起点</strong>，然后拉动到<strong>删除音频重点</strong>，放开左键。</p>
<p><img src="http://tc.seoipo.com/20180504151226.png" alt="" loading="lazy"></p>
</li>
<li>
<p>点击右键，选择<strong>删除</strong>。刚才选择的音频就被删除了。</p>
<p><img src="http://tc.seoipo.com/20180504151306.png" alt="" loading="lazy"></p>
</li>
<li>
<p>在混音器中点击，用<strong>鼠标滚轮</strong>放大音频的可选间距，重复上面 3 步，继续剪切音频。</p>
<p><img src="http://tc.seoipo.com/20180504151816.png" alt="" loading="lazy"></p>
</li>
<li>
<p>精修完后，点击 <code>文件</code> - <code>另存为</code>，就可以保存我们的音频文件了。</p>
</li>
</ol>
<p>PS：原本是想用时间来截取音频，但找遍 Audition 菜单，也没发现能按时间来剪切的选项。最后还是靠鼠标完成的。。</p>
]]></content:encoded>
      <enclosure url="http://tc.seoipo.com/20180504152233.png" type="image/png"/>
    </item>
  </channel>
</rss>